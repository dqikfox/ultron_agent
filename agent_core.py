







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































def stop_agent(self):
        """Stop the agent and cleanup."""
        try:
            if hasattr(self, "voice") and hasattr(self.voice, "stop_voice"):
                self.voice.stop_voice()
            await self.performance_monitor.stop_monitoring()
            await self.task_scheduler.stop()
            await self.event_system.emit("agent_stopping")
            self.status = AgentStatus.MAINTENANCE
        except Exception as e:
            logging.error(f"Error stopping agent: {e} - agent_core.py:979")

if __name__ == "__main__":
    agent = UltronAgent()
    if agent.gui and agent.gui_thread:
        try:
            agent.gui_thread.join()
        except KeyboardInterrupt:
            print("\nShutting down GUI... - agent_core.py:987")
    else:
        agent.start()


    def handle_command(self, command: str):
        """Handle command from scheduler."""
        logging.info(f"Received command: {sanitize_log_input(command[:100])} - agent_core.py:994")
        response = self.plan_and_act(command)
        logging.info(f"Agent response: {sanitize_log_input(str(response)[:100])} - agent_core.py:996")
        return response

    async def run(self):
        """Start the agent and all subsystems."""
        logging.info("Starting ULTRON Agent... - agent_core.py:1001")
        try:
            await self.performance_monitor.start_monitoring()
            asyncio.create_task(self.task_scheduler.start())

            self.status = AgentStatus.READY
            await self.event_system.emit("agent_ready")

            # Main loop
            while True:
                try:
                    user_input = input("ULTRON> ")
                    if not user_input:
                        continue
                    if user_input.lower() in ("exit", "quit"):
                        print("Goodbye. - agent_core.py:1016")
                        break
                    result = self.plan_and_act(user_input)
                    print(f"ULTRON: {result} - agent_core.py:1019")
                except (EOFError, KeyboardInterrupt):
                    print("\nShutting down. - agent_core.py:1021")
                    break
                except Exception as e:
                    print(f"Error: {e} - agent_core.py:1024")
                    await self.event_system.emit("error", str(e))
        except Exception as e:
            logging.error(f"Fatal error in run(): {e} - agent_core.py:1027")
            await self.event_system.emit("error", str(e))
        finally:
            logging.info("ULTRON Agent shutdown - agent_core.py:1030")
            await self.performance_monitor.stop_monitoring()
            await self.task_scheduler.stop()

    def start(self):
        """Start the agent."""
        asyncio.run(self.run())

    async def stop(self):
        """Stop the agent and cleanup."""
        try:
            if hasattr(self, "voice") and hasattr(self.voice, "stop_voice"):
                self.voice.stop_voice()
            await self.performance_monitor.stop_monitoring()
            await self.task_scheduler.stop()
            await self.event_system.emit("agent_stopping")
            self.status = AgentStatus.MAINTENANCE
        except Exception as e:
            logging.error(f"Error stopping agent: {e} - agent_core.py:1048")

if __name__ == "__main__":
    agent = UltronAgent()
    if agent.gui and agent.gui_thread:
        try:
            agent.gui_thread.join()
        except KeyboardInterrupt:
            print("\nShutting down GUI... - agent_core.py:1056")
    else:
        agent.start()
